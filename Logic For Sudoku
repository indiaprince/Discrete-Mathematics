#include <stdio.h>

#include <stdlib.h>

#pragma warning (disable:4996)


int main(int argc, char *argv[]) {
    FILE *fp = fopen("C:\\Users\\samsung\\Desktop\\z3\\bin\\formula.txt", "wt");
    
    FILE *op = fopen("C:\\Users\\samsung\\Desktop\\z3\\bin\\input.txt", "rt");
    
    fprintf(fp, "p cnf 729\n");
    
    int i, j, n, m, k, r, s;
    
    int input[9][9] = { 0 };   // input을 받아오기 위한 2차원 array
    
    int num[81];
    
    int cnt = 0;
    
    int *pointer = input;     // array 증가시키려는 포인터
    
    int count[4] = { 0 };
    
    int idx = 0;
    
    while (!feof(op))  // 파일 다 읽을때까지 반복
    {
        //공백으로 분리된 파일 읽기
        
        fscanf(op, "%c ", pointer);
        
        pointer++;
    }
    
    for (i = 1; i <= 9; i++) {
        
        for (j = 1; j <= 9; j++) {
            
            if (input[i - 1][j - 1] == '*') {
                
                count[idx] = (j - 1) * 9 + (i - 1) * 81;
                
                idx++;
                
            }
            
            else if(input[i - 1][j-1] != '0'){
                
                num[cnt++] = input[i - 1][j - 1] - '0' + (j-1) * 9 + (i - 1) *81 ;
                
            }
        }
    }
    
    for (i = 1; i <= 9; i++) {
        
        for (n = 1; n <= 9; n++) {
            
            for (j = 1; j <= 9; j++) {
                
                k = (j - 1) * 9 + (i - 1) * 81 + n;
                
                fprintf(fp, "%d ", k);
                
            }
            
            fprintf(fp, "0  \n");
            
        }
        
    }
    
    for (j = 1; j <= 9; j++) {
        
        for (n = 1; n <= 9; n++) {
            
            for (i = 1; i <= 9; i++) {
                
                k = (j - 1) * 9 + (i - 1) * 81 + n;
                
                fprintf(fp, "%d ", k);
                
            }
            
            fprintf(fp, "0  \n");
            
        }
        
        
        
    }
    
    for (r = 0; r <= 2; r++) {
        
        for (s = 0; s <= 2; s++) {
            
            for (n = 1; n <= 9; n++) {
                
                for (i = 1; i <= 3; i++) {
                    
                    for (j = 1; j <= 3; j++) {
                        
                        k = ((j + (3 * s)) - 1) * 9 + (i + (3 * r) - 1) * 81 + n;
                        
                        fprintf(fp, "%d ", k);
                        
                    }
                    
                }
                
                fprintf(fp, "0  \n");
                
            }
            
        }
        
    }
    
    for (i = 1; i <= 9; i++) {
        
        for (j = 1; j <= 9; j++) {
            
            for (n = 1; n <= 8; n++) {
                
                for (m = n + 1; m <= 9; m++) {
                    
                    fprintf(fp, "-%d -%d 0\n", ((j - 1) * 9 + (i - 1) * 81 + n), ((j - 1) * 9 + (i - 1) * 81 + m));
                    
                }
                
            }
            
        }
        
    }
    
    for (i = 1; i < cnt; i++) {
        
        fprintf(fp, "%d 0\n", num[i]);
        
    }
    
    
    if (idx == 2) {
        
        for (n = 1; n <= 9; n++) {
            for(i=0; i<=1;i++){
                for(j=0; j<=1;j++){
                    if(i!=j){
                        fprintf(fp, "%d -%d 0\n", count[i] + n, count[j] + n);
                    }
                }
            }
            
        }
        
    }
    
    if (idx == 3) {
        
        for (n = 1; n <= 9; n++) {
            for(i=0; i<=2;i++){
                for(j=0; j<=2;j++){
                    if(i!=j){
                        fprintf(fp, "%d -%d 0\n", count[i] + n, count[j] + n);
                    }
                }
            }
            
        }
        
    }
    
    if (idx == 4) {
        
        for (n = 1; n <= 9; n++) {
            
            for (n = 1; n <= 9; n++) {
                for(i=0; i<=3;i++){
                    for(j=0; j<=3;j++){
                        if(i!=j){
                            fprintf(fp, "%d -%d 0\n", count[i] + n, count[j] + n);
                        }
                    }
                }
                
            }
        }
        
    }
    fclose(fp); // 파일 닫기
    
    fclose(op);// 파일 닫기
    
    system("z3 -dimacs C:\\Users\\samsung\\Desktop\\z3\\bin\\formula.txt > C:\\Users\\samsung\\Desktop\\z3\\bin\\out.txt");
    
    // 자동적으로 system 함수를 이용하여 z3가 c언어 컴파일링 중에 실행되게 하여 out.txt 파일에 sat 값 저장.
    
    FILE *out = fopen("C:\\Users\\samsung\\Desktop\\z3\\bin\\out.txt", "rt"); // txt 파일 열기
    
    int output[9][9] = { 0 };  // 아웃풋을 저장하기 위한 어레이
    
    char sat[5];  // 처음 1줄에 sat 이라는 것을 제외 시키기 위한 char array
    
    int t = 0;
    
    int *temp = output;  // 아웃풋 어레이를 포인터로 증가시켜 접근하기 위해.
    
    fgets(sat, 6, out);// sat 제외
    
    if (strcmp(sat, "unsat") == 0) {
        
        printf("There is No solution\n");
        
        exit(0);
    }
    
    while (!feof(out))  // 끝날 때까지 읽기
        
    {
        
        fscanf(out, "%d ", &t);
        
        if (t > 0) {
            
            *temp = t;
            
            temp++;    // 0보다 큰 걸 다 output array에 옮기기
            
        }
        
        
        
    }
    
    for (i = 0; i < 9; i++) {
        
        for (j = 0; j < 9; j++) {
            
            output[i][j] = output[i][j] % 9;
            
            if (output[i][j] == 0) {
                
                output[i][j] = 9;
		//(j - 1) * 9 + (i - 1) * 81 + n)의 값에서 9로 나누니 자연스럽게 9까지 나오는 스도쿠의 9는 0이 된다. 그래서 9는 따로 저장.
            }
            printf("%d ", output[i][j]); 
        }
        
        printf("\n");
        
    }
    
    FILE *put = fopen("C:\\Users\\samsung\\Desktop\\z3\\bin\\output.txt", "wt"); // output.txt 파일에 저장하기 위함.
    
    for (i = 0; i < 9; i++) {
        
        for (j = 0; j < 9; j++) {
            
            fprintf(put, "%d ", output[i][j]);
            
        }
        fprintf(put, "\n");
    }
    
}
